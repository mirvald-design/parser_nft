import asyncio
import os
import random
from datetime import datetime

import aiohttp
import gspread
import pandas as pd
# import openpyxl
from aiogram import types
from aiogram.types import ParseMode
from aiohttp import ClientSession
from google.oauth2 import service_account

from conf import bot, logger, write_to_excel, write_to_csv
from database import is_parse, update_is_parse, insert_into_all_data

from keyboards import keyboard_stop, keyboard_parse


async def start_parse(chat_id, query, profile_nums, total_vol_user):
    # Загрузка учетных данных из предоставленного `credentials`
    scopes = [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive'
    ]
    credentials = service_account.Credentials.from_service_account_file(
        'credentials.json', scopes=scopes)

    client = gspread.authorize(credentials)

    spreadsheet = client.open_by_key(
        '1HiW2rMa__OflQw4AU-4XVEpwRcC20OZyeSP3vdtm41I')

    worksheet = spreadsheet.get_worksheet(0)

    existing_accounts = worksheet.col_values(1)

    if len(existing_accounts) > 0:
        pass
    else:

        column_names = ['Account Link', 'Profile Name', 'Profile Social Links', 'Activity',
                        'Registration Date', 'Collection Url', 'Collection Name',
                        'Collection Social Links', 'Keyword', 'Total volume', 'user_id']

        worksheet.insert_row(column_names, index=1)

    all_profiles = []

    await bot.send_sticker(chat_id=chat_id,
                           sticker='CAACAgEAAxkBAAEDtBth5eidIiThGzn-rpVY1PSNvxYwwwAC-QgAAuN4BAABib-0yZsMiTojBA',
                           reply_markup=await keyboard_stop(chat_id=chat_id))
    naideno = await bot.send_message(chat_id=chat_id, text='<b>Already checked NFTs  0</b>', parse_mode=ParseMode.HTML)
    message = await bot.send_message(chat_id=chat_id, text='Searching...', parse_mode=ParseMode.HTML)
    finded_items = await main1(chat_id=chat_id, all_profiles=all_profiles,
                               profile_nums=profile_nums, total_vol_user=total_vol_user,
                               worksheet=worksheet, query=query, message=message, naideno=naideno)

    if len(all_profiles) > 0:
        csv_file = os.path.join('EXCEL', f'sellers_for{chat_id}.csv')
        excel_file = os.path.join('EXCEL', f'sellers_for{chat_id}.xlsx')
        df = pd.read_csv(csv_file)
        df.to_excel(excel_file, index=False)
        os.remove(csv_file)
        if os.path.exists(excel_file):
            with open(excel_file, 'rb') as file:
                await bot.send_document(chat_id=message.chat.id, document=file,
                                        caption=f'A total of {finded_items} objects were found.',
                                        reply_markup=await keyboard_parse(chat_id=int(chat_id)))
            os.remove(excel_file)
            all_profiles.clear()
    await update_is_parse(user_id=str(message.chat.id), is_parse=False)
    # await bot.send_message(chat_id=chat_id, text=f'{spreadsheet.url}', reply_markup=await keyboard_parse())


async def get_headers(x_query, x_build="84185ccb5b80e2ab768f7f5013872959755dead9"):
    return {
        "Authority": "opensea.io",
        "Method": "POST",
        "Path": "/__api/graphql/",
        "Scheme": "https",
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Content-Type": "application/json",
        "Origin": "https://opensea.io",
        "Referer": "https://opensea.io/",
        "Sec-Ch-Ua": '"Not/A)Brand";v="99", "Google Chrome";v="115", "Chromium";v="115"',
        "Sec-Ch-Ua-Mobile": "?0",
        "Sec-Ch-Ua-Platform": "Windows",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "same-origin",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
        "X-App-Id": "opensea-web",
        "X-Build-Id": x_build,
        "X-Signed-Query": x_query
    }


async def get_payload(query, cursor=None):
    return {
        "id": "AssetsPageQuery",
        "query": "query AssetsPageQuery(\n  $categories: [CollectionSlug!]\n  $chains: [ChainScalar!]\n  $collections: [CollectionSlug!]\n  $count: Int\n  $cursor: String\n  $numericTraits: [TraitRangeType!]\n  $paymentAssets: [PaymentAssetSymbol!]\n  $priceFilter: PriceFilterType\n  $query: String\n  $sortAscending: Boolean\n  $sortBy: SearchSortBy\n  $stringTraits: [TraitInputType!]\n  $toggles: [SearchToggle!]\n  $safelistRequestStatuses: [SafelistRequestStatus!]\n) {\n  ...GeneralAssetSearch_data_4CUUUf\n}\n\nfragment AccountLink_data on AccountType {\n  address\n  config\n  isCompromised\n  user {\n    publicUsername\n    id\n  }\n  displayName\n  ...ProfileImage_data\n  ...wallet_accountKey\n  ...accounts_url\n}\n\nfragment AddToCartAndQuickBuyButton_order on OrderV2Type {\n  ...useIsQuickBuyEnabled_order\n  ...ItemAddToCartButton_order\n  ...QuickBuyButton_order\n}\n\nfragment AssetContextMenu_data on AssetType {\n  relayId\n}\n\nfragment AssetMediaAnimation_asset on AssetType {\n  ...AssetMediaImage_asset\n  ...AssetMediaContainer_asset\n  ...AssetMediaPlaceholderImage_asset\n}\n\nfragment AssetMediaAudio_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaContainer_asset on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_1LNk0S on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_4a3mm5 on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  defaultRarityData {\n    ...RarityIndicator_data\n    id\n  }\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaEditions_asset_1mZMwQ on AssetType {\n  decimals\n}\n\nfragment AssetMediaImage_asset on AssetType {\n  backgroundColor\n  imageUrl\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaPlaceholderImage_asset on AssetType {\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaVideo_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaWebgl_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMedia_asset on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_1LNk0S\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetMedia_asset_1mZMwQ on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_1LNk0S\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetMedia_asset_5MxNd on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_4a3mm5\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetQuantity_data on AssetQuantityType {\n  asset {\n    ...Price_data\n    id\n  }\n  quantity\n}\n\nfragment AssetSearchListViewTableAssetInfo_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ...PortfolioTableItemCellTooltip_item\n}\n\nfragment AssetSearchListViewTableQuickBuy_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  relayId\n}\n\nfragment AssetSearchList_data on ItemType {\n  __isItemType: __typename\n  __typename\n  relayId\n  ...ItemCard_data_4i3CwU\n  ... on AssetType {\n    collection {\n      isVerified\n      relayId\n      id\n    }\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      isVerified\n      relayId\n      id\n    }\n  }\n  chain {\n    identifier\n  }\n  ...useAssetSelectionStorage_item_4wOaz9\n}\n\nfragment BulkPurchaseModal_orders on OrderV2Type {\n  relayId\n  item {\n    __typename\n    relayId\n    chain {\n      identifier\n    }\n    ... on AssetType {\n      collection {\n        slug\n        isSafelisted\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  payment {\n    relayId\n    symbol\n    id\n  }\n  ...useTotalPrice_orders\n  ...useFulfillingListingsWillReactivateOrders_orders\n}\n\nfragment CancelItemOrdersButton_items on ItemType {\n  __isItemType: __typename\n  __typename\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    relayId\n  }\n  ... on AssetBundleType {\n    relayId\n  }\n  ...CancelOrdersConfirmationModal_items\n}\n\nfragment CancelOrdersConfirmationModal_items on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...StackedAssetMedia_assets\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            ...StackedAssetMedia_assets\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment CollectionLink_assetContract on AssetContractType {\n  address\n  blockExplorerLink\n}\n\nfragment CollectionLink_collection on CollectionType {\n  name\n  slug\n  verificationStatus\n  ...collection_url\n}\n\nfragment CollectionTrackingContext_collection on CollectionType {\n  relayId\n  slug\n  isVerified\n  isCollectionOffersEnabled\n  defaultChain {\n    identifier\n  }\n}\n\nfragment CreateListingButton_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...CreateQuickSingleListingFlowModal_asset\n  }\n  ...itemEvents_dataV2\n  ...item_sellUrl\n}\n\nfragment CreateQuickSingleListingFlowModal_asset on AssetType {\n  relayId\n  chain {\n    identifier\n  }\n  ...itemEvents_dataV2\n}\n\nfragment EditListingButton_item on ItemType {\n  __isItemType: __typename\n  chain {\n    identifier\n  }\n  ...EditListingModal_item\n  ...itemEvents_dataV2\n}\n\nfragment EditListingButton_listing on OrderV2Type {\n  ...EditListingModal_listing\n}\n\nfragment EditListingModal_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    tokenId\n    assetContract {\n      address\n      id\n    }\n    chain {\n      identifier\n    }\n  }\n  ... on AssetBundleType {\n    slug\n  }\n}\n\nfragment EditListingModal_listing on OrderV2Type {\n  relayId\n}\n\nfragment GeneralAssetSearchListPagination_data_4CUUUf on Query {\n  queriedAt\n  searchItems(first: $count, after: $cursor, categories: $categories, chains: $chains, collections: $collections, numericTraits: $numericTraits, paymentAssets: $paymentAssets, priceFilter: $priceFilter, querystring: $query, resultType: ASSETS, safelistRequestStatuses: $safelistRequestStatuses, sortAscending: $sortAscending, sortBy: $sortBy, stringTraits: $stringTraits, toggles: $toggles) {\n    edges {\n      node {\n        __typename\n        ...readItemHasBestAsk_item\n        ...AssetSearchList_data\n        ... on Node {\n          __isNode: __typename\n          id\n        }\n      }\n      cursor\n    }\n    totalCount\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment GeneralAssetSearch_data_4CUUUf on Query {\n  ...GeneralAssetSearchListPagination_data_4CUUUf\n}\n\nfragment ItemAddToCartButton_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    ... on AssetType {\n      isCurrentlyFungible\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  ...ShoppingCartContextProvider_inline_order\n}\n\nfragment ItemCardContent on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    relayId\n    name\n    ...AssetMedia_asset_1mZMwQ\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            ...AssetMedia_asset\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ItemCardContent_1mZMwQ on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    relayId\n    name\n    ...AssetMedia_asset_1mZMwQ\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            ...AssetMedia_asset\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ItemCardCta_item_2qvZ6X on ItemType {\n  __isItemType: __typename\n  __typename\n  orderData {\n    bestAskV2 {\n      ...AddToCartAndQuickBuyButton_order\n      ...EditListingButton_listing\n      ...QuickBuyButton_order\n      id\n    }\n  }\n  ...useItemCardCta_item_2qvZ6X\n  ...itemEvents_dataV2\n  ...CreateListingButton_item\n  ...EditListingButton_item\n}\n\nfragment ItemCardFooter_2YN2Q8 on ItemType {\n  __isItemType: __typename\n  __typename\n  relayId\n  name\n  orderData {\n    bestBidV2 {\n      orderType\n      priceType {\n        unit\n      }\n      ...ItemCardPrice_data\n      id\n    }\n    bestAskV2 {\n      ...ItemCardFooter_bestAskV2\n      id\n    }\n  }\n  ...ItemMetadata_2JGaZg\n  ... on AssetType {\n    tokenId\n    isDelisted\n    defaultRarityData {\n      ...RarityIndicator_data\n      id\n    }\n    collection {\n      slug\n      name\n      isVerified\n      ...collection_url\n      ...useIsRarityEnabled_collection\n      id\n    }\n    largestOwner {\n      owner {\n        ...AccountLink_data\n        id\n      }\n      id\n    }\n    ...AssetSearchListViewTableAssetInfo_item\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      slug\n      name\n      isVerified\n      ...collection_url\n      ...useIsRarityEnabled_collection\n      id\n    }\n  }\n  ...useItemCardCta_item_2qvZ6X\n  ...item_url\n  ...ItemCardContent\n}\n\nfragment ItemCardFooter_bestAskV2 on OrderV2Type {\n  orderType\n  priceType {\n    unit\n  }\n  maker {\n    address\n    id\n  }\n  ...ItemCardPrice_data\n  ...ItemAddToCartButton_order\n  ...AssetSearchListViewTableQuickBuy_order\n  ...useIsQuickBuyEnabled_order\n}\n\nfragment ItemCardPrice_data on OrderV2Type {\n  perUnitPriceType {\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    symbol\n    id\n  }\n  ...useIsQuickBuyEnabled_order\n}\n\nfragment ItemCard_data_4i3CwU on ItemType {\n  __isItemType: __typename\n  __typename\n  relayId\n  chain {\n    identifier\n  }\n  orderData {\n    bestAskV2 {\n      priceType {\n        eth\n      }\n      id\n    }\n  }\n  ... on AssetType {\n    isDelisted\n    totalQuantity\n    collection {\n      slug\n      ...CollectionTrackingContext_collection\n      id\n    }\n    ...itemEvents_data\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      slug\n      ...CollectionTrackingContext_collection\n      id\n    }\n  }\n  ...ItemCardContent_1mZMwQ\n  ...ItemCardFooter_2YN2Q8\n  ...ItemCardCta_item_2qvZ6X\n  ...item_url\n  ...ItemTrackingContext_item\n}\n\nfragment ItemMetadata_2JGaZg on ItemType {\n  __isItemType: __typename\n  __typename\n  orderData {\n    bestAskV2 {\n      openedAt\n      createdDate\n      closedAt\n      id\n    }\n  }\n  assetEventData {\n    lastSale {\n      unitPriceQuantity {\n        ...AssetQuantity_data\n        quantity\n        asset {\n          symbol\n          decimals\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment ItemTrackingContext_item on ItemType {\n  __isItemType: __typename\n  relayId\n  verificationStatus\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    tokenId\n    isReportedSuspicious\n    assetContract {\n      address\n      id\n    }\n  }\n  ... on AssetBundleType {\n    slug\n  }\n}\n\nfragment OrderListItem_order on OrderV2Type {\n  relayId\n  makerOwnedQuantity\n  item {\n    __typename\n    displayName\n    ... on AssetType {\n      assetContract {\n        ...CollectionLink_assetContract\n        id\n      }\n      collection {\n        ...CollectionLink_collection\n        id\n      }\n      ...AssetMedia_asset\n      ...asset_url\n      ...useItemFees_item\n    }\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              displayName\n              relayId\n              assetContract {\n                ...CollectionLink_assetContract\n                id\n              }\n              collection {\n                ...CollectionLink_collection\n                id\n              }\n              ...StackedAssetMedia_assets\n              ...AssetMedia_asset\n              ...asset_url\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ...itemEvents_dataV2\n    ...useIsItemSafelisted_item\n    ...ItemTrackingContext_item\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  remainingQuantityType\n  ...OrderPrice\n}\n\nfragment OrderList_orders on OrderV2Type {\n  item {\n    __typename\n    ... on AssetType {\n      __typename\n      relayId\n    }\n    ... on AssetBundleType {\n      __typename\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  relayId\n  ...OrderListItem_order\n  ...useFulfillingListingsWillReactivateOrders_orders\n}\n\nfragment OrderPrice on OrderV2Type {\n  priceType {\n    unit\n  }\n  perUnitPriceType {\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    ...TokenPricePayment\n    id\n  }\n}\n\nfragment PortfolioTableItemCellTooltip_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ...AssetMedia_asset_5MxNd\n  ...PortfolioTableTraitTable_asset\n  ...asset_url\n}\n\nfragment PortfolioTableTraitTable_asset on AssetType {\n  assetContract {\n    address\n    chain\n    id\n  }\n  isCurrentlyFungible\n  tokenId\n}\n\nfragment Price_data on AssetType {\n  decimals\n  symbol\n  usdSpotPrice\n}\n\nfragment ProfileImage_data on AccountType {\n  imageUrl\n}\n\nfragment QuickBuyButton_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  relayId\n}\n\nfragment RarityIndicator_data on RarityDataType {\n  rank\n  rankPercentile\n  rankCount\n  maxRank\n}\n\nfragment ShoppingCartContextProvider_inline_order on OrderV2Type {\n  relayId\n  makerOwnedQuantity\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    relayId\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  maker {\n    relayId\n    id\n  }\n  priceType {\n    usd\n  }\n  payment {\n    relayId\n    id\n  }\n  remainingQuantityType\n  ...useTotalItems_orders\n  ...ShoppingCart_orders\n}\n\nfragment ShoppingCartDetailedView_orders on OrderV2Type {\n  relayId\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  supportsGiftingOnPurchase\n  ...useTotalPrice_orders\n  ...OrderList_orders\n}\n\nfragment ShoppingCart_orders on OrderV2Type {\n  ...ShoppingCartDetailedView_orders\n  ...BulkPurchaseModal_orders\n}\n\nfragment StackedAssetMedia_assets on AssetType {\n  relayId\n  ...AssetMedia_asset\n  collection {\n    logo\n    id\n  }\n}\n\nfragment TokenPricePayment on PaymentAssetType {\n  symbol\n}\n\nfragment accounts_url on AccountType {\n  address\n  user {\n    publicUsername\n    id\n  }\n}\n\nfragment asset_url on AssetType {\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment bundle_url on AssetBundleType {\n  slug\n  chain {\n    identifier\n  }\n}\n\nfragment collection_url on CollectionType {\n  slug\n  isCategory\n}\n\nfragment itemEvents_data on AssetType {\n  relayId\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment itemEvents_dataV2 on ItemType {\n  __isItemType: __typename\n  relayId\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    tokenId\n    assetContract {\n      address\n      id\n    }\n  }\n}\n\nfragment item_sellUrl on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...asset_url\n  }\n  ... on AssetBundleType {\n    slug\n    chain {\n      identifier\n    }\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment item_url on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...asset_url\n  }\n  ... on AssetBundleType {\n    ...bundle_url\n  }\n}\n\nfragment readItemHasBestAsk_item on ItemType {\n  __isItemType: __typename\n  orderData {\n    bestAskV2 {\n      __typename\n      id\n    }\n  }\n}\n\nfragment useAssetSelectionStorage_item_4wOaz9 on ItemType {\n  __isItemType: __typename\n  __typename\n  relayId\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    ...asset_url\n    isCompromised\n  }\n  ...item_sellUrl\n  ...AssetContextMenu_data\n  ...CancelItemOrdersButton_items\n}\n\nfragment useFulfillingListingsWillReactivateOrders_orders on OrderV2Type {\n  ...useTotalItems_orders\n}\n\nfragment useIsItemSafelisted_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    collection {\n      slug\n      verificationStatus\n      id\n    }\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 30) {\n      edges {\n        node {\n          asset {\n            collection {\n              slug\n              verificationStatus\n              id\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment useIsQuickBuyEnabled_order on OrderV2Type {\n  orderType\n  item {\n    __typename\n    ... on AssetType {\n      isCurrentlyFungible\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment useIsRarityEnabled_collection on CollectionType {\n  slug\n  enabledRarities\n}\n\nfragment useItemCardCta_item_2qvZ6X on ItemType {\n  __isItemType: __typename\n  __typename\n  chain {\n    identifier\n  }\n  orderData {\n    bestAskV2 {\n      orderType\n      maker {\n        address\n        id\n      }\n      id\n    }\n  }\n  ... on AssetType {\n    isDelisted\n    isListable\n    isCurrentlyFungible\n  }\n}\n\nfragment useItemFees_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    totalCreatorFee\n    collection {\n      openseaSellerFeeBasisPoints\n      isCreatorFeesEnforced\n      id\n    }\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      openseaSellerFeeBasisPoints\n      totalCreatorFeeBasisPoints\n      isCreatorFeesEnforced\n      id\n    }\n  }\n}\n\nfragment useTotalItems_orders on OrderV2Type {\n  item {\n    __typename\n    relayId\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment useTotalPrice_orders on OrderV2Type {\n  relayId\n  perUnitPriceType {\n    usd\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    usd\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    symbol\n    ...TokenPricePayment\n    id\n  }\n}\n\nfragment wallet_accountKey on AccountType {\n  address\n}\n",
        "variables": {
            "categories": None,
            "chains": None,
            "collections": [],
            "count": 20,
            "cursor": cursor,
            "numericTraits": None,
            "paymentAssets": None,
            "priceFilter": None,
            "query": query,
            "sortAscending": False,
            "sortBy": "CREATED_DATE",
            "stringTraits": None,
            "toggles": None,
            "safelistRequestStatuses": None
        }
    }


async def main1(chat_id, all_profiles, profile_nums, total_vol_user, worksheet, query, message, naideno):
    url = "https://opensea.io/__api/graphql/"
    headers = await get_headers(x_query='3cd568847bd133dc1afad8d1748e26951e01c7d774d3752c0c1b0294b0d2aaaa')
    finded_items = 0
    async with asyncio.Semaphore(value=100):
        async with ClientSession(  # connector=aiohttp.TCPConnector(ssl=True),
                headers=headers,
                cookies={"CONSENT": "YES+cb.20210720-07-p0.en+FX+410"},
                # timeout=aiohttp.ClientTimeout(total=8000)
        ) as session:
            payload = await get_payload(query)
            async with session.post(url, json=payload) as response:
                data = await response.json()
            try:
                items = data.get('data').get('searchItems').get('edges')
            except Exception as ex:
                logger.info(f'ERROR {ex}\n{data}')
                items = []
                await asyncio.sleep(random.randrange(1, 10))
            finded_items = await make_requests(items=items, query=query, chat_id=chat_id, all_profiles=all_profiles,
                                               profile_nums=profile_nums, worksheet=worksheet,
                                               message=message,
                                               total_vol_user=total_vol_user, url=url, finded_items=finded_items,
                                               naideno=naideno)
            try:
                page_info = data.get('data').get('searchItems').get('pageInfo')
                next_page = page_info.get('hasNextPage')
            except:
                return finded_items
            while next_page:
                if not await is_parse(user_id=str(chat_id)):
                    break
                end_cursor = page_info.get('endCursor')
                payload = await get_payload(query=query, cursor=end_cursor)
                await asyncio.sleep(random.randrange(1, 2))
                async with session.post(url, json=payload) as response:
                    data = await response.json()
                if not data.get('data'):
                    await asyncio.sleep(random.randrange(2, 3))
                    async with session.post(url, json=payload) as response:
                        data = await response.json()
                if data.get('data'):
                    items = data.get('data').get('searchItems').get('edges')
                    await asyncio.sleep(1)
                    finded_items = await make_requests(items=items, query=query, chat_id=chat_id,
                                                       all_profiles=all_profiles,
                                                       profile_nums=profile_nums, worksheet=worksheet,
                                                       message=message,
                                                       total_vol_user=total_vol_user, url=url,
                                                       finded_items=finded_items, naideno=naideno)
                    page_info = data.get('data').get(
                        'searchItems').get('pageInfo')

                    next_page = page_info.get('hasNextPage')
                    if not next_page:
                        break

                else:
                    logger.info(f'data is None --> {data}')
                    await asyncio.sleep(1)
                    continue

        return finded_items


async def make_requests(url, items, query, chat_id, all_profiles, profile_nums, worksheet, message,
                        total_vol_user, finded_items, naideno):
    for item in items:
        if len(all_profiles) >= int(profile_nums) or not await is_parse(user_id=str(chat_id)):
            break
        finded_items += 1
        if finded_items % 20 == 0:
            await bot.edit_message_text(chat_id=chat_id, message_id=naideno.message_id,
                                        text=f'<b>Already checked NFTs  {finded_items}</b>',
                                        parse_mode=ParseMode.HTML)
        address = item.get('node').get('assetContract').get('address')
        chain = item.get('node').get('assetContract').get('chain')
        token_id = item.get('node').get('tokenId')
        await asyncio.sleep(random.randrange(1, 2))
        try:
            await get_all_info(url=url, contractAddress=address, chain=chain, token_id=token_id, query=query,
                               chat_id=chat_id,
                               all_profiles=all_profiles, profile_nums=profile_nums, worksheet=worksheet,
                               message=message, total_vol_user=total_vol_user)
        except Exception as ex:
            logger.info(ex)
    return finded_items


async def get_all_info(url, contractAddress, chain, token_id, query, chat_id, all_profiles, profile_nums, worksheet,
                       message, total_vol_user):
    headers = await get_headers(x_query='450af3524da68f4ee5edcd751c56acf2767a31470bc1d58438dc53c991d4372c')
    payload = {
        "id": "AssetPageQuery",
        "query": "query AssetPageQuery(\n  $tokenId: String!\n  $contractAddress: AddressScalar!\n  $chain: ChainScalar!\n) {\n  ...AssetPage_data_3gcux1\n}\n\nfragment AcceptHighestOfferButton_asset on AssetType {\n  ...AcceptOfferButton_asset\n  ...itemEvents_dataV2\n}\n\nfragment AcceptHighestOfferButton_tradeSummary on TradeSummaryType {\n  bestBid {\n    item {\n      __typename\n      ...itemEvents_dataV2\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    perUnitPriceType {\n      unit\n      symbol\n    }\n    ...AcceptOfferButton_order\n    id\n  }\n}\n\nfragment AcceptOfferButton_asset on AssetType {\n  relayId\n  acceptOfferDisabled {\n    __typename\n  }\n  ownedQuantity(identity: {})\n  ...AcceptOfferModalContent_criteriaAsset_3z4lq0\n  ...itemEvents_dataV2\n}\n\nfragment AcceptOfferButton_order on OrderV2Type {\n  relayId\n  side\n  orderType\n  item {\n    __typename\n    ... on AssetType {\n      acceptOfferDisabled {\n        __typename\n      }\n      collection {\n        statsV2 {\n          floorPrice {\n            eth\n          }\n        }\n        id\n      }\n      chain {\n        identifier\n      }\n      ownedQuantity(identity: {})\n      ...itemEvents_dataV2\n    }\n    ... on AssetBundleType {\n      bundleCollection: collection {\n        statsV2 {\n          floorPrice {\n            eth\n          }\n        }\n        id\n      }\n      chain {\n        identifier\n      }\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              ownedQuantity(identity: {})\n              id\n            }\n            id\n          }\n        }\n      }\n      ...itemEvents_dataV2\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  maker {\n    address\n    id\n  }\n  perUnitPriceType {\n    eth\n  }\n}\n\nfragment AcceptOfferDisabledAlert_asset on AssetType {\n  decimals\n  ownedQuantity(identity: {})\n  acceptOfferDisabled {\n    ...useAcceptOfferDisabledReason_data\n  }\n}\n\nfragment AcceptOfferModalContent_criteriaAsset_3z4lq0 on AssetType {\n  __typename\n  assetContract {\n    address\n    id\n  }\n  chain {\n    identifier\n  }\n  tokenId\n  relayId\n  ownedQuantity(identity: {})\n  isCurrentlyFungible\n  defaultRarityData {\n    rank\n    id\n  }\n  ...ItemOfferDetails_item\n  ...FloorPriceDifference_item\n  ...readOptionalCreatorFees_item\n}\n\nfragment AcceptOffersButton_asset on AssetType {\n  relayId\n  ...readOptionalCreatorFees_item\n  ...CreatorFeeInputModalContent_asset\n}\n\nfragment AcceptOffersButton_orders on OrderV2Type {\n  relayId\n  ...readOrderFees_order\n  ...CreatorFeeInputModalContent_orders\n}\n\nfragment AccountLink_data on AccountType {\n  address\n  config\n  isCompromised\n  user {\n    publicUsername\n    id\n  }\n  displayName\n  ...ProfileImage_data\n  ...wallet_accountKey\n  ...accounts_url\n}\n\nfragment AddToCartAndQuickBuyButton_order on OrderV2Type {\n  ...useIsQuickBuyEnabled_order\n  ...ItemAddToCartButton_order\n  ...QuickBuyButton_order\n}\n\nfragment AssetDetails_data on AssetType {\n  assetContract {\n    openseaVersion\n    address\n    chain\n    blockExplorerLink\n    tokenStandard\n    id\n  }\n  metadataStatus\n  tokenId\n  isFrozen\n  frozenAt\n  tokenMetadata\n  lastUpdatedAt\n  ...useItemFees_item\n}\n\nfragment AssetListButton_asset on AssetType {\n  ...CreateListingButton_item\n}\n\nfragment AssetMediaAnimation_asset on AssetType {\n  ...AssetMediaImage_asset\n  ...AssetMediaContainer_asset\n  ...AssetMediaPlaceholderImage_asset\n}\n\nfragment AssetMediaAudio_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaContainer_asset on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_1LNk0S on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaEditions_asset_1mZMwQ on AssetType {\n  decimals\n}\n\nfragment AssetMediaImage_asset on AssetType {\n  backgroundColor\n  imageUrl\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaPlaceholderImage_asset on AssetType {\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaVideo_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaWebgl_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMedia_asset on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_1LNk0S\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetOfferModal_asset on AssetType {\n  relayId\n  chain {\n    identifier\n  }\n}\n\nfragment AssetPageMediaHeader__accountInfo_1mZMwQ on AssetType {\n  isFavorite\n  animationUrl\n  imageUrl\n  imageStorageUrl\n}\n\nfragment AssetPageMediaHeader_item on ItemType {\n  __isItemType: __typename\n  relayId\n  __typename\n  ... on AssetType {\n    chain {\n      identifier\n    }\n    decimals\n    favoritesCount\n    isDelisted\n    isFrozen\n    hasUnlockableContent\n  }\n  ... on AssetBundleType {\n    chain {\n      identifier\n    }\n    assetCount\n  }\n}\n\nfragment AssetPage_data_3gcux1 on Query {\n  nft(tokenId: $tokenId, contractAddress: $contractAddress, chain: $chain) {\n    ...AssetPageMediaHeader_item\n    ...AssetPageMediaHeader__accountInfo_1mZMwQ\n    ...asset_display_name\n    ...ContentAuthenticity_data\n    assetContract {\n      address\n      chain\n      ...CollectionLink_assetContract\n      id\n    }\n    creator {\n      address\n      user {\n        publicUsername\n        id\n      }\n      displayName\n      ...AccountLink_data\n      id\n    }\n    animationUrl\n    backgroundColor\n    collection {\n      description\n      isSensitiveContent\n      displayData {\n        cardDisplayStyle\n      }\n      category {\n        slug\n      }\n      hidden\n      imageUrl\n      name\n      slug\n      ...CollectionLink_collection\n      ...Boost_collection\n      ...Property_collection\n      ...NumericTrait_collection\n      ...SocialBar_data\n      ...useIsLiveUpdatesEnabledForCollection_collection\n      ...useIsRarityEnabled_collection\n      ...CollectionInspiredBy_data\n      id\n    }\n    decimals\n    description\n    imageUrl\n    name\n    numVisitors\n    isDelisted\n    isListable\n    isReportedSuspicious\n    isSensitiveContent\n    isUnderReview\n    isCompromised\n    isBiddingEnabled {\n      value\n      reason\n    }\n    relayId\n    tokenId\n    hasUnlockableContent\n    favoritesCount\n    tradeSummary {\n      bestAsk {\n        closedAt\n        orderType\n        priceType {\n          usd\n        }\n        maker {\n          ...wallet_accountKey\n          id\n        }\n        relayId\n        ...PrivateListingBanner_data\n        id\n      }\n      bestBid {\n        __typename\n        id\n      }\n      ...TradeStation_data\n    }\n    acceptHighestOffer: tradeSummary(excludeAccountAsMaker: true) {\n      ...TradeStation_acceptHighestOffer\n    }\n    traits(first: 100) {\n      edges {\n        node {\n          relayId\n          displayType\n          floatValue\n          intValue\n          traitType\n          value\n          ...Boost_trait\n          ...Property_trait\n          ...NumericTrait_trait\n          ...Date_trait\n          id\n        }\n      }\n    }\n    defaultRarityData {\n      ...RarityIndicator_data\n      id\n    }\n    ...AssetMedia_asset\n    ...Toolbar_asset\n    ...asset_url\n    ...itemEvents_data\n    ...AssetDetails_data\n    ownedQuantity(identity: {})\n    assetOwners(first: 1) {\n      edges {\n        node {\n          quantity\n          owner {\n            ...AccountLink_data\n            id\n          }\n          id\n        }\n      }\n      count\n    }\n    totalQuantity\n    isCurrentlyFungible\n    redeemableCampaigns {\n      relayId\n      campaignId\n      ...RedeemableItemCard_redeemableCampaign\n      id\n    }\n    ...RedeemableItemCard_itemToBurn\n    ...TradeStation_archetype\n    ...OffersPanel_asset\n    ...ListingsPanel_asset\n    ...SemiFungibleTradeStation_asset\n    ...OrderManager_item\n    ...ItemTrackingContext_item\n    id\n  }\n  eventActivity(archetype: {assetContractAddress: $contractAddress, tokenId: $tokenId, chain: $chain}, first: 11) {\n    edges {\n      node {\n        relayId\n        id\n      }\n    }\n  }\n  ...SemiFungibleTradeStation_bestListings_3gcux1\n  ...SemiFungibleTradeStation_bestOffers_3gcux1\n  ...CampaignAnnouncementModal_data\n}\n\nfragment Boost_collection on CollectionType {\n  numericTraits {\n    key\n    value {\n      max\n    }\n  }\n  ...collection_url\n}\n\nfragment Boost_trait on TraitType {\n  displayType\n  floatValue\n  intValue\n  traitType\n}\n\nfragment BulkPurchaseModal_orders on OrderV2Type {\n  relayId\n  item {\n    __typename\n    relayId\n    chain {\n      identifier\n    }\n    ... on AssetType {\n      collection {\n        slug\n        isSafelisted\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  payment {\n    relayId\n    symbol\n    id\n  }\n  ...useTotalPrice_orders\n  ...useFulfillingListingsWillReactivateOrders_orders\n}\n\nfragment BuyNowButton_orders on OrderV2Type {\n  ...BulkPurchaseModal_orders\n}\n\nfragment CampaignAnnouncementModal_data on Query {\n  campaignAnnouncementModal {\n    campaignId\n    title\n    description\n    overrideUrl\n    ctaText\n    ctaUrl\n    id\n  }\n}\n\nfragment CollectionInspiredBy_data on CollectionType {\n  inspiredBy(first: 2) {\n    edges {\n      node {\n        slug\n        name\n        ...collection_url\n        id\n      }\n    }\n  }\n}\n\nfragment CollectionLink_assetContract on AssetContractType {\n  address\n  blockExplorerLink\n}\n\nfragment CollectionLink_collection on CollectionType {\n  name\n  slug\n  verificationStatus\n  ...collection_url\n}\n\nfragment ContentAuthenticity_data on AssetType {\n  authenticityMetadata {\n    signedOn\n    signedBy\n    producedWith\n    walletAddress\n    id\n  }\n  imageUrl\n  creator {\n    address\n    id\n  }\n  chain {\n    identifier\n  }\n}\n\nfragment ContextualPriceListBestOfferItem_tradeSummary on TradeSummaryType {\n  bestBid {\n    perUnitPriceType {\n      unit\n      symbol\n      usd\n    }\n    id\n  }\n}\n\nfragment ContextualPriceList_tradeSummary on TradeSummaryType {\n  ...ContextualPriceListBestOfferItem_tradeSummary\n}\n\nfragment CreateListingButton_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...CreateQuickSingleListingFlowModal_asset\n  }\n  ...itemEvents_dataV2\n  ...item_sellUrl\n}\n\nfragment CreateQuickSingleListingFlowModal_asset on AssetType {\n  relayId\n  chain {\n    identifier\n  }\n  ...itemEvents_dataV2\n}\n\nfragment CreatorFeeInputModalContent_asset on AssetType {\n  ...ItemOfferDetails_item\n  ...readOptionalCreatorFees_item\n  ...useItemFees_item\n}\n\nfragment CreatorFeeInputModalContent_orders on OrderV2Type {\n  ...readOrderFees_order\n  ...ServiceFeeText_orders\n}\n\nfragment Date_trait on TraitType {\n  traitType\n  floatValue\n  intValue\n}\n\nfragment EditListingButton_item on ItemType {\n  __isItemType: __typename\n  chain {\n    identifier\n  }\n  ...EditListingModal_item\n  ...itemEvents_dataV2\n}\n\nfragment EditListingButton_listing on OrderV2Type {\n  ...EditListingModal_listing\n}\n\nfragment EditListingModal_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    tokenId\n    assetContract {\n      address\n      id\n    }\n    chain {\n      identifier\n    }\n  }\n  ... on AssetBundleType {\n    slug\n  }\n}\n\nfragment EditListingModal_listing on OrderV2Type {\n  relayId\n}\n\nfragment FloorPriceDifference_item on ItemType {\n  __isItemType: __typename\n  ... on AssetType {\n    collection {\n      statsV2 {\n        floorPrice {\n          eth\n        }\n      }\n      id\n    }\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      statsV2 {\n        floorPrice {\n          eth\n        }\n      }\n      id\n    }\n  }\n}\n\nfragment ItemAddToCartButton_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    ... on AssetType {\n      isCurrentlyFungible\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  ...ShoppingCartContextProvider_inline_order\n}\n\nfragment ItemOfferDetails_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    displayName\n    collection {\n      ...CollectionLink_collection\n      id\n    }\n    ...StackedAssetMedia_assets\n  }\n  ... on AssetBundleType {\n    displayName\n    bundleCollection: collection {\n      ...CollectionLink_collection\n      id\n    }\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            ...StackedAssetMedia_assets\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ItemTrackingContext_item on ItemType {\n  __isItemType: __typename\n  relayId\n  verificationStatus\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    tokenId\n    isReportedSuspicious\n    assetContract {\n      address\n      id\n    }\n  }\n  ... on AssetBundleType {\n    slug\n  }\n}\n\nfragment ListingsPanel_asset on AssetType {\n  tokenId\n  isCurrentlyFungible\n  ownedQuantity(identity: {})\n  chain {\n    identifier\n  }\n  assetContract {\n    address\n    id\n  }\n}\n\nfragment MakeAssetOfferButton_asset on AssetType {\n  relayId\n  verificationStatus\n  isBiddingEnabled {\n    value\n    reason\n  }\n  chain {\n    identifier\n  }\n  ...AssetOfferModal_asset\n}\n\nfragment NumericTrait_collection on CollectionType {\n  numericTraits {\n    key\n    value {\n      max\n    }\n  }\n  ...collection_url\n}\n\nfragment NumericTrait_trait on TraitType {\n  floatValue\n  intValue\n  maxValue\n  traitType\n}\n\nfragment OfferModal_tradeSummary on TradeSummaryType {\n  bestAsk {\n    relayId\n    closedAt\n    payment {\n      relayId\n      id\n    }\n    id\n  }\n  ...useOfferModalAdapter_tradeData\n  ...ContextualPriceList_tradeSummary\n}\n\nfragment OffersPanel_asset on AssetType {\n  relayId\n  tokenId\n  isCurrentlyFungible\n  ownedQuantity(identity: {})\n  chain {\n    identifier\n  }\n  assetContract {\n    address\n    id\n  }\n  ...AcceptOfferDisabledAlert_asset\n}\n\nfragment OrderListItem_order on OrderV2Type {\n  relayId\n  makerOwnedQuantity\n  item {\n    __typename\n    displayName\n    ... on AssetType {\n      assetContract {\n        ...CollectionLink_assetContract\n        id\n      }\n      collection {\n        ...CollectionLink_collection\n        id\n      }\n      ...AssetMedia_asset\n      ...asset_url\n      ...useItemFees_item\n    }\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              displayName\n              relayId\n              assetContract {\n                ...CollectionLink_assetContract\n                id\n              }\n              collection {\n                ...CollectionLink_collection\n                id\n              }\n              ...StackedAssetMedia_assets\n              ...AssetMedia_asset\n              ...asset_url\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ...itemEvents_dataV2\n    ...useIsItemSafelisted_item\n    ...ItemTrackingContext_item\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  remainingQuantityType\n  ...OrderPrice\n}\n\nfragment OrderList_orders on OrderV2Type {\n  item {\n    __typename\n    ... on AssetType {\n      __typename\n      relayId\n    }\n    ... on AssetBundleType {\n      __typename\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  relayId\n  ...OrderListItem_order\n  ...useFulfillingListingsWillReactivateOrders_orders\n}\n\nfragment OrderManager_item on ItemType {\n  __isItemType: __typename\n  __typename\n  chain {\n    identifier\n  }\n  tradeSummary {\n    bestAsk {\n      __typename\n      ...EditListingButton_listing\n      id\n    }\n  }\n  ... on AssetType {\n    isEditable {\n      value\n    }\n    ownedQuantity(identity: {})\n    isCurrentlyFungible\n    ...asset_edit_url\n  }\n  ...CreateListingButton_item\n  ...EditListingButton_item\n}\n\nfragment OrderPrice on OrderV2Type {\n  priceType {\n    unit\n  }\n  perUnitPriceType {\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    ...TokenPricePayment\n    id\n  }\n}\n\nfragment OrderUsdPrice on OrderV2Type {\n  priceType {\n    usd\n  }\n  perUnitPriceType {\n    usd\n  }\n  dutchAuctionFinalPriceType {\n    usd\n  }\n  openedAt\n  closedAt\n}\n\nfragment PrivateListingBanner_data on OrderV2Type {\n  taker {\n    address\n    ...AccountLink_data\n    ...wallet_accountKey\n    id\n  }\n  maker {\n    ...wallet_accountKey\n    id\n  }\n}\n\nfragment ProfileImage_data on AccountType {\n  imageUrl\n}\n\nfragment Property_collection on CollectionType {\n  ...collection_url\n  statsV2 {\n    totalSupply\n  }\n}\n\nfragment Property_trait on TraitType {\n  traitCount\n  traitType\n  value\n}\n\nfragment QuickBuyButton_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  relayId\n}\n\nfragment RarityIndicator_data on RarityDataType {\n  rank\n  rankPercentile\n  rankCount\n  maxRank\n}\n\nfragment RedeemableItemCard_itemToBurn on AssetType {\n  collection {\n    name\n    id\n  }\n  ownedQuantity(identity: {})\n  ...asset_url\n}\n\nfragment RedeemableItemCard_redeemableCampaign on RedeemableCampaignType {\n  campaignId\n  image\n  name\n  requiredAmountToRedeem\n}\n\nfragment SemiFungibleTradeStation_asset on AssetType {\n  ownedQuantity(identity: {})\n  ...TradeStationBuyTab_asset\n  ...TradeStationSellTab_asset\n}\n\nfragment SemiFungibleTradeStation_bestListings_3gcux1 on Query {\n  ...TradeStationBuyTab_bestListings_3gcux1\n}\n\nfragment SemiFungibleTradeStation_bestOffers_3gcux1 on Query {\n  ...TradeStationSellTab_bestOffers_3gcux1\n}\n\nfragment ServiceFeeText_orders on OrderV2Type {\n  ...readOrderFees_order\n}\n\nfragment ShoppingCartContextProvider_inline_order on OrderV2Type {\n  relayId\n  makerOwnedQuantity\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    relayId\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  maker {\n    relayId\n    id\n  }\n  priceType {\n    usd\n  }\n  payment {\n    relayId\n    id\n  }\n  remainingQuantityType\n  ...useTotalItems_orders\n  ...ShoppingCart_orders\n}\n\nfragment ShoppingCartDetailedView_orders on OrderV2Type {\n  relayId\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  supportsGiftingOnPurchase\n  ...useTotalPrice_orders\n  ...OrderList_orders\n}\n\nfragment ShoppingCart_orders on OrderV2Type {\n  ...ShoppingCartDetailedView_orders\n  ...BulkPurchaseModal_orders\n}\n\nfragment SocialBar_data on CollectionType {\n  relayId\n  discordUrl\n  externalUrl\n  instagramUsername\n  mediumUsername\n  slug\n  telegramUrl\n  twitterUsername\n  connectedTwitterUsername\n  assetContracts(first: 2) {\n    edges {\n      node {\n        blockExplorerLink\n        chainData {\n          blockExplorer {\n            name\n            identifier\n          }\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment StackedAssetMedia_assets on AssetType {\n  relayId\n  ...AssetMedia_asset\n  collection {\n    logo\n    id\n  }\n}\n\nfragment TokenPricePayment on PaymentAssetType {\n  symbol\n}\n\nfragment Toolbar_asset on AssetType {\n  ...asset_url\n  ...itemEvents_data\n  assetContract {\n    address\n    id\n  }\n  collection {\n    externalUrl\n    id\n  }\n  externalLink\n  relayId\n  tokenId\n}\n\nfragment TradeStationBuyTab_asset on AssetType {\n  tradeSummary {\n    bestAsk {\n      ...TradeStationOrderPrice_order\n      id\n    }\n  }\n  ...useFulfillSemiFungibleOrders_asset\n  ...MakeAssetOfferButton_asset\n  ...itemEvents_dataV2\n}\n\nfragment TradeStationBuyTab_bestListings_3gcux1 on Query {\n  nft(tokenId: $tokenId, contractAddress: $contractAddress, chain: $chain) {\n    bestListings(first: 10, forTaker: {}) {\n      edges {\n        node {\n          ...useFulfillSemiFungibleOrders_orders\n          id\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    id\n  }\n}\n\nfragment TradeStationOrderPrice_order on OrderV2Type {\n  ...OrderPrice\n  ...OrderUsdPrice\n}\n\nfragment TradeStationSellTab_asset on AssetType {\n  ownedQuantity(identity: {})\n  tradeSummary {\n    bestBid {\n      ...TradeStationOrderPrice_order\n      id\n    }\n  }\n  ...useFulfillSemiFungibleOrders_asset\n  ...AssetListButton_asset\n  ...itemEvents_dataV2\n}\n\nfragment TradeStationSellTab_bestOffers_3gcux1 on Query {\n  nft(tokenId: $tokenId, contractAddress: $contractAddress, chain: $chain) {\n    bestOffers(first: 10, forTaker: {}) {\n      edges {\n        node {\n          ...useFulfillSemiFungibleOrders_orders\n          id\n          __typename\n        }\n        cursor\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n    id\n  }\n}\n\nfragment TradeStation_acceptHighestOffer on TradeSummaryType {\n  bestBid {\n    relayId\n    id\n  }\n  ...AcceptHighestOfferButton_tradeSummary\n}\n\nfragment TradeStation_archetype on AssetType {\n  verificationStatus\n  chain {\n    identifier\n  }\n  largestOwner {\n    owner {\n      ...wallet_accountKey\n      id\n    }\n    id\n  }\n  isCurrentlyFungible\n  isListable\n  isBiddingEnabled {\n    value\n    reason\n  }\n  relayId\n  acceptOfferDisabled {\n    __typename\n  }\n  isFastPollingEnabled\n  ...AcceptHighestOfferButton_asset\n  ...useFulfillSemiFungibleOrders_asset\n  ...AssetOfferModal_asset\n}\n\nfragment TradeStation_bestAsk on OrderV2Type {\n  closedAt\n  dutchAuctionFinalPriceType {\n    unit\n  }\n  openedAt\n  orderType\n  priceFnEndedAt\n  englishAuctionReservePriceType {\n    unit\n  }\n  relayId\n  maker {\n    address\n    ...wallet_accountKey\n    id\n  }\n  item {\n    __typename\n    verificationStatus\n    relayId\n    chain {\n      identifier\n    }\n    ... on AssetType {\n      tokenId\n      isCurrentlyFungible\n      assetContract {\n        address\n        id\n      }\n      collection {\n        slug\n        id\n      }\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  priceType {\n    unit\n    usd\n  }\n  remainingQuantityType\n  perUnitPriceType {\n    usd\n  }\n  payment {\n    symbol\n    relayId\n    asset {\n      relayId\n      id\n    }\n    ...TokenPricePayment\n    id\n  }\n  taker {\n    ...wallet_accountKey\n    id\n  }\n  ...OrderPrice\n  ...OrderUsdPrice\n  ...AddToCartAndQuickBuyButton_order\n  ...QuickBuyButton_order\n}\n\nfragment TradeStation_bestBid on OrderV2Type {\n  ...OrderPrice\n  ...OrderUsdPrice\n  payment {\n    relayId\n    id\n  }\n  priceType {\n    unit\n  }\n  perUnitPriceType {\n    usd\n  }\n}\n\nfragment TradeStation_data on TradeSummaryType {\n  bestAsk {\n    ...TradeStation_bestAsk\n    id\n  }\n  bestBid {\n    ...TradeStation_bestBid\n    id\n  }\n  ...OfferModal_tradeSummary\n}\n\nfragment accounts_url on AccountType {\n  address\n  user {\n    publicUsername\n    id\n  }\n}\n\nfragment asset_display_name on AssetType {\n  tokenId\n  name\n}\n\nfragment asset_edit_url on AssetType {\n  assetContract {\n    address\n    chain\n    id\n  }\n  tokenId\n  collection {\n    slug\n    id\n  }\n}\n\nfragment asset_url on AssetType {\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment collection_url on CollectionType {\n  slug\n  isCategory\n}\n\nfragment itemEvents_data on AssetType {\n  relayId\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment itemEvents_dataV2 on ItemType {\n  __isItemType: __typename\n  relayId\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    tokenId\n    assetContract {\n      address\n      id\n    }\n  }\n}\n\nfragment item_sellUrl on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...asset_url\n  }\n  ... on AssetBundleType {\n    slug\n    chain {\n      identifier\n    }\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment price on OrderV2Type {\n  priceType {\n    unit\n  }\n}\n\nfragment readOptionalCreatorFees_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    collection {\n      isCreatorFeesEnforced\n      totalCreatorFeeBasisPoints\n      id\n    }\n  }\n}\n\nfragment readOrderFees_order on OrderV2Type {\n  makerFees(first: 10) {\n    edges {\n      node {\n        basisPoints\n        isOpenseaFee\n        id\n      }\n    }\n  }\n  takerFees(first: 10) {\n    edges {\n      node {\n        basisPoints\n        isOpenseaFee\n        id\n      }\n    }\n  }\n}\n\nfragment useAcceptOfferDisabledReason_data on AcceptOfferDisabledType {\n  until\n}\n\nfragment useFulfillSemiFungibleOrders_asset on AssetType {\n  relayId\n  totalQuantity\n  ownedQuantity(identity: {})\n  ...AcceptOffersButton_asset\n}\n\nfragment useFulfillSemiFungibleOrders_orders on OrderV2Type {\n  relayId\n  payment {\n    symbol\n    id\n  }\n  perUnitPriceType {\n    unit\n  }\n  remainingQuantityType\n  ...useOrdersWithValidMakerOwnedQuantity_order\n  ...useTotalPrice_orders\n  ...BuyNowButton_orders\n  ...AcceptOffersButton_orders\n}\n\nfragment useFulfillingListingsWillReactivateOrders_orders on OrderV2Type {\n  ...useTotalItems_orders\n}\n\nfragment useIsItemSafelisted_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    collection {\n      slug\n      verificationStatus\n      id\n    }\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 30) {\n      edges {\n        node {\n          asset {\n            collection {\n              slug\n              verificationStatus\n              id\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment useIsLiveUpdatesEnabledForCollection_collection on CollectionType {\n  statsV2 {\n    hasFungibles\n  }\n}\n\nfragment useIsQuickBuyEnabled_order on OrderV2Type {\n  orderType\n  item {\n    __typename\n    ... on AssetType {\n      isCurrentlyFungible\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment useIsRarityEnabled_collection on CollectionType {\n  slug\n  enabledRarities\n}\n\nfragment useItemFees_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    totalCreatorFee\n    collection {\n      openseaSellerFeeBasisPoints\n      isCreatorFeesEnforced\n      id\n    }\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      openseaSellerFeeBasisPoints\n      totalCreatorFeeBasisPoints\n      isCreatorFeesEnforced\n      id\n    }\n  }\n}\n\nfragment useOfferModalAdapter_tradeData on TradeSummaryType {\n  bestAsk {\n    orderType\n    relayId\n    item {\n      __typename\n      verificationStatus\n      ... on Node {\n        __isNode: __typename\n        id\n      }\n    }\n    payment {\n      relayId\n      id\n    }\n    perUnitPriceType {\n      unit\n    }\n    id\n  }\n  bestBid {\n    relayId\n    payment {\n      relayId\n      id\n    }\n    ...price\n    id\n  }\n}\n\nfragment useOrdersWithValidMakerOwnedQuantity_order on OrderV2Type {\n  makerOwnedQuantity\n  remainingQuantityType\n  side\n  perUnitPriceType {\n    unit\n  }\n  maker {\n    relayId\n    id\n  }\n}\n\nfragment useTotalItems_orders on OrderV2Type {\n  item {\n    __typename\n    relayId\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment useTotalPrice_orders on OrderV2Type {\n  relayId\n  perUnitPriceType {\n    usd\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    usd\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    symbol\n    ...TokenPricePayment\n    id\n  }\n}\n\nfragment wallet_accountKey on AccountType {\n  address\n}\n",
        "variables": {
            "chain": chain,
            "contractAddress": contractAddress,
            "tokenId": token_id
        }

    }

    async with asyncio.Semaphore(value=10):
        async with ClientSession(headers=headers) as session:
            async with session.post(url, json=payload) as response:
                data = await response.json()

            if data.get('data'):
                await get_data(url, query, chat_id, all_profiles, profile_nums, worksheet,
                               message, total_vol_user, data)
            else:
                await asyncio.sleep(random.randrange(2, 3))
                await get_all_info(url, contractAddress, chain, token_id, query, chat_id, all_profiles, profile_nums,
                                   worksheet,
                                   message, total_vol_user)


async def get_data(url, query, chat_id, all_profiles, profile_nums, worksheet,
                   message, total_vol_user, data):
    if len(all_profiles) >= int(profile_nums):
        return

    nft_data = data.get('data').get('nft')
    collection_name = nft_data.get('collection').get('name')
    collection_url = 'https://opensea.io/collection/' + \
        nft_data.get('collection').get('slug')  # cxllabs

    collection_social_links = ''
    discord_url = nft_data.get('collection').get('discordUrl')
    collection_social_links += discord_url + ', ' if discord_url else ''
    externalUrl = nft_data.get('collection').get('externalUrl')
    collection_social_links += externalUrl + ' , ' if externalUrl else ''
    telegram_url = nft_data.get('collection').get('telegramUrl')
    collection_social_links += telegram_url + ', ' if telegram_url else ''
    twitter_username = nft_data.get('collection').get('twitterUsername')
    collection_social_links += f"https://twitter.com/{twitter_username}, " if twitter_username else ''
    instagram_username = nft_data.get('collection').get('instagramUsername')
    collection_social_links += f"https://www.instagram.com/{instagram_username}, " if instagram_username else ''
    medium_username = nft_data.get('collection').get('mediumUsername')
    collection_social_links += f"https://medium.com/@{medium_username}, " if medium_username else ''
    await asyncio.sleep(random.randrange(1, 2))
    # logger.info(f'social_links: {social_links}')
    collection_info = await get_collection_info(url=url,
                                                collection_slug=nft_data.get('collection').get('slug'))
    if not collection_info:
        return

    try:
        total_volume = collection_info.get('data').get(
            'collection').get('statsV2').get('totalVolume')
        total_vol = round(float(total_volume.get("unit")), 2)
        if total_vol_user and float(total_vol_user) > 0.0:
            if not (0.0 <= total_vol < round(float(total_vol_user), 2)):
                return

    except Exception as ex:
        logger.info(f'total vol user {total_vol_user}  {ex}')
        total_vol = total_vol_user if total_vol_user else 0.1

    creator = nft_data.get('creator')
    if not creator:
        return
    creator_address = creator.get('address')
    creator_name = creator.get('displayName')

    creator_url = 'https://opensea.io/' + \
        creator_name if creator_name else 'https://opensea.io/' + creator_address
    if creator_url in all_profiles:
        return
    await asyncio.sleep(random.randrange(1, 2))
    user_info = await get_user_info(username=creator_name, url=url)
    user_data = user_info.get('data')
    if not user_data:
        return
    formatted_date = ''
    if user_data:
        try:
            registration_date = user_data.get(
                'account').get('user').get('dateJoined')
            date_obj = datetime.strptime(
                registration_date, "%Y-%m-%dT%H:%M:%S.%f")
            # Форматирование объекта даты в строку с форматом "день месяц год"
            formatted_date = date_obj.strftime("%d %B %Y")
        except:
            #
            pass
    else:
        logger.info(f'user_data --> {user_data}')
    try:
        if creator_name:
            activity = await get_activity(url=url, username=creator_name)
        else:
            activity = await get_activity(url=url, address=creator_address)
        if activity:
            activity = "Yes"
        else:
            activity = 'No'
    except:
        activity = 'No'

    user_social_links = ''
    # logger.info(f'user_data*****************  {user_data}')
    if not user_data.get('account'):
        return
    try:
        user_twitter_username = user_data.get(
            'account').get('connectedTwitterUsername')
        if not user_twitter_username:
            user_twitter_username = user_data.get(
                'account').get('metadata').get('twitterUsername')
        user_social_links += f"https://twitter.com/{user_twitter_username} , " if user_twitter_username else ''
        user_instagram_username = user_data.get(
            'account').get('connectedInstagramUsername')
        if not user_instagram_username:
            user_instagram_username = user_data.get(
                'account').get('metadata').get('instagramUsername')
        user_social_links += f"https://www.instagram.com/{user_instagram_username}, " if user_instagram_username else ''

        user_website_url = user_info.get('data').get(
            'account').get('metadata').get('websiteUrl')

        user_social_links += user_website_url + ' , ' if user_website_url else ''
    except Exception as _ex:
        logger.info(f' error user socials{_ex}')
    if not user_social_links:
        return
    data = {
        'Account Link': creator_url,
        'Profile Name': creator_name,
        'Profile Social Links': user_social_links,
        'Activity': activity,
        'Registration Date': formatted_date,
        'Collection Url': collection_url,
        # замените на реальные данные
        'Collection Name': collection_name if collection_name else ' ',
        'Collection Social Links': collection_social_links,  # замените на реальные данные
        'Total volume': str(total_vol),

    }
    # data_for_db = {
    #     'Account Link': creator_url,
    #     'Profile Name': creator_name,
    #     'Social Links': social_links,
    #     'Activity': activity,
    #     'Registration Date': formatted_date,
    #     'Collection Url': collection_url,
    #     'Keyword': query,
    #     'Total volume': str(total_volume)
    # }
    data_for_db = {
        'Account Link': creator_url,
        'Profile Name': creator_name,
        'Profile Social Links': user_social_links,
        'Activity': activity,
        'Registration Date': formatted_date,
        'Collection Url': collection_url,
        # замените на реальные данные
        'Collection Name': collection_name if collection_name else ' ',
        'Collection Social Links': collection_social_links,  # замените на реальные данные
        'Keyword': query,
        'Total volume': str(total_vol),
        'user_id': str(chat_id)  # замените на реальные данные
    }
    all_profiles.append(creator_url)
    # logger.info(len(all_profiles))
    t = f'<b>{len(all_profiles)}</b> / <b>{profile_nums}</b>'
    # await bot.send_message(chat_id=chat_id, text=t, parse_mode=ParseMode.HTML,reply_markup=await keyoard_stop())

    # await save_excel(user_id=chat_id, data_list=[list(data.values())])

    try:
        await message.edit_text(text=t,
                                parse_mode=ParseMode.HTML)
    except Exception as ex:
        logger.info(f'message.edit_text  -->  {ex}')
    # Запишите значения в таблицу
    is_save = await insert_into_all_data(data=data_for_db)
    # await write_to_excel(user_id=chat_id, data_list=[list(data.values())])

    await write_to_csv(user_id=chat_id, data_list=[list(data.values())])
    if is_save:
        worksheet.append_row(list(data_for_db.values()))
    # sheet.append(list(data.values()))
    # wb.save(output_file)


async def get_activity(url, username=None, address=None):
    IDENTITY = {'username': username}
    if address:
        IDENTITY = {'address': address}

    payload = {
        'id': 'EventHistoryQuery',
        'query': "query EventHistoryQuery(\n  $archetype: ArchetypeInputType\n  $bundle: BundleSlug\n  $collections: [CollectionSlug!]\n  $categories: [CollectionSlug!]\n  $chains: [ChainScalar!]\n  $eventTypes: [EventType!]\n  $cursor: String\n  $count: Int = 16\n  $showAll: Boolean = false\n  $identity: IdentityInputType\n  $stringTraits: [TraitInputType!]\n  $isRarityExpansionEnabled: Boolean!\n  $eventTimestamp_Gt: DateTime\n  $rarityFilter: RarityFilterType\n) {\n  ...EventHistory_data_2Weyxc\n}\n\nfragment AccountLink_data on AccountType {\n  address\n  config\n  isCompromised\n  user {\n    publicUsername\n    id\n  }\n  displayName\n  ...ProfileImage_data\n  ...wallet_accountKey\n  ...accounts_url\n}\n\nfragment ActivityTableFullRow_itemData on ItemType {\n  __isItemType: __typename\n  __typename\n  hidden\n  ... on AssetType {\n    isDelisted\n    isListable\n    isReportedSuspicious\n    isCompromised\n    isUnderReview\n    isSuspicious\n  }\n  ...PortfolioTableItemCellTooltip_item\n}\n\nfragment AssetMediaAnimation_asset on AssetType {\n  ...AssetMediaImage_asset\n  ...AssetMediaContainer_asset\n  ...AssetMediaPlaceholderImage_asset\n}\n\nfragment AssetMediaAudio_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaContainer_asset on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_1LNk0S on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_4a3mm5 on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  defaultRarityData {\n    ...RarityIndicator_data\n    id\n  }\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaEditions_asset_1mZMwQ on AssetType {\n  decimals\n}\n\nfragment AssetMediaImage_asset on AssetType {\n  backgroundColor\n  imageUrl\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaPlaceholderImage_asset on AssetType {\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaVideo_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaWebgl_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMedia_asset on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_1LNk0S\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetMedia_asset_5MxNd on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_4a3mm5\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment CollectionCell_collection on CollectionType {\n  name\n  imageUrl\n  isVerified\n  ...collection_url\n}\n\nfragment CollectionCell_trait on TraitType {\n  traitType\n  value\n}\n\nfragment CollectionLink_assetContract on AssetContractType {\n  address\n  blockExplorerLink\n}\n\nfragment CollectionLink_collection on CollectionType {\n  name\n  slug\n  verificationStatus\n  ...collection_url\n}\n\nfragment DealLink_swap on SwapType {\n  relayId\n  maker {\n    address\n    id\n  }\n  taker {\n    address\n    id\n  }\n}\n\nfragment EventHistory_data_2Weyxc on Query {\n  eventActivity(after: $cursor, bundle: $bundle, archetype: $archetype, first: $count, categories: $categories, collections: $collections, chains: $chains, eventTypes: $eventTypes, identity: $identity, includeHidden: true, stringTraits: $stringTraits, eventTimestamp_Gt: $eventTimestamp_Gt, rarityFilter: $rarityFilter) {\n    edges {\n      node {\n        collection {\n          ...CollectionCell_collection\n          id\n        }\n        traitCriteria {\n          ...CollectionCell_trait\n          id\n        }\n        itemQuantity\n        item @include(if: $showAll) {\n          __typename\n          relayId\n          verificationStatus\n          ...ItemCell_data\n          ...item_url\n          ...PortfolioTableItemCellTooltip_item\n          ...ActivityTableFullRow_itemData\n          ... on AssetType {\n            defaultRarityData @include(if: $isRarityExpansionEnabled) {\n              rank\n              id\n            }\n            collection {\n              ...CollectionLink_collection\n              id\n            }\n            assetContract {\n              ...CollectionLink_assetContract\n              id\n            }\n          }\n          ... on AssetBundleType {\n            bundleCollection: collection {\n              ...CollectionLink_collection\n              id\n            }\n          }\n          ... on Node {\n            __isNode: __typename\n            id\n          }\n        }\n        relayId\n        eventTimestamp\n        eventType\n        orderStatus\n        customEventName\n        ...utilsAssetEventLabel\n        creatorFee {\n          unit\n        }\n        devFeePaymentEvent {\n          ...EventTimestamp_data\n          id\n        }\n        fromAccount {\n          address\n          ...AccountLink_data\n          id\n        }\n        perUnitPrice {\n          unit\n          eth\n          usd\n        }\n        endingPriceType {\n          unit\n        }\n        priceType {\n          unit\n        }\n        payment {\n          ...TokenPricePayment\n          id\n        }\n        seller {\n          ...AccountLink_data\n          id\n        }\n        sellOrder {\n          taker {\n            __typename\n            id\n          }\n          id\n        }\n        toAccount {\n          ...AccountLink_data\n          id\n        }\n        winnerAccount {\n          ...AccountLink_data\n          id\n        }\n        swap {\n          __typename\n          makerAssetBundle {\n            assetQuantities(first: 1) {\n              edges {\n                node {\n                  asset {\n                    __typename\n                    relayId\n                    verificationStatus\n                    ...ItemCell_data\n                    ...item_url\n                    ...PortfolioTableItemCellTooltip_item\n                    ...ActivityTableFullRow_itemData\n                    defaultRarityData @include(if: $isRarityExpansionEnabled) {\n                      rank\n                      id\n                    }\n                    collection {\n                      ...CollectionLink_collection\n                      id\n                    }\n                    assetContract {\n                      ...CollectionLink_assetContract\n                      id\n                    }\n                    id\n                  }\n                  id\n                }\n              }\n              count\n            }\n            id\n          }\n          takerAssetBundle {\n            assetQuantities(first: 32) {\n              count\n            }\n            id\n          }\n          ...DealLink_swap\n          id\n        }\n        ...EventTimestamp_data\n        id\n        __typename\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n\nfragment EventTimestamp_data on AssetEventType {\n  eventTimestamp\n  transaction {\n    blockExplorerLink\n    id\n  }\n}\n\nfragment ItemCell_data on ItemType {\n  __isItemType: __typename\n  __typename\n  displayName\n  ...item_url\n  ...PortfolioTableItemCellTooltip_item\n  ... on AssetType {\n    ...AssetMedia_asset\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 30) {\n      edges {\n        node {\n          asset {\n            ...AssetMedia_asset\n            id\n          }\n          relayId\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment PortfolioTableItemCellTooltip_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ...AssetMedia_asset_5MxNd\n  ...PortfolioTableTraitTable_asset\n  ...asset_url\n}\n\nfragment PortfolioTableTraitTable_asset on AssetType {\n  assetContract {\n    address\n    chain\n    id\n  }\n  isCurrentlyFungible\n  tokenId\n}\n\nfragment ProfileImage_data on AccountType {\n  imageUrl\n}\n\nfragment RarityIndicator_data on RarityDataType {\n  rank\n  rankPercentile\n  rankCount\n  maxRank\n}\n\nfragment TokenPricePayment on PaymentAssetType {\n  symbol\n}\n\nfragment accounts_url on AccountType {\n  address\n  user {\n    publicUsername\n    id\n  }\n}\n\nfragment asset_url on AssetType {\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment bundle_url on AssetBundleType {\n  slug\n  chain {\n    identifier\n  }\n}\n\nfragment collection_url on CollectionType {\n  slug\n  isCategory\n}\n\nfragment item_url on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...asset_url\n  }\n  ... on AssetBundleType {\n    ...bundle_url\n  }\n}\n\nfragment useIsRarityEnabled_collection on CollectionType {\n  slug\n  enabledRarities\n}\n\nfragment utilsAssetEventLabel on AssetEventType {\n  isMint\n  isAirdrop\n  eventType\n}\n\nfragment wallet_accountKey on AccountType {\n  address\n}\n",
        'variables': {
            'archetype': None,
            'bundle': None,
            'collections': [],
            'categories': None,
            'chains': None,
            'eventTypes': None,
            'cursor': None,
            'count': 16,
            'showAll': False,
            'identity': IDENTITY,
            'stringTraits': None,
            'isRarityExpansionEnabled': False,
            'eventTimestamp_Gt': None,
            'rarityFilter': None,
        }
    }
    headers = await get_headers(x_query='d2e381cccd458a9e2f9bffd973bad252b04f8e6494d3937a54503d841400653b',
                                x_build='2346781393aff145f0ac1b13ff62866894bcf13d')
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            # logger.info(f'GET ACTIVITY  --->>  {response_data}')

            return response_data.get('data').get('eventActivity').get('edges')


async def get_user_info(username, url):
    payload = {
        "id": "DefaultAccountPageQuery",
        "query": "query DefaultAccountPageQuery(\n  $identity: IdentityInputType!\n  $includePrivateAssetCount: Boolean!\n  $collection: CollectionSlug\n) {\n  collectionSlug: collection(collection: $collection) {\n    __typename\n    id\n  }\n  ...ProfileContainer_data_1QDmLU\n  account(identity: $identity) {\n    relayId\n    ...profilePageQueries_featured_3z3gbW\n    id\n  }\n}\n\nfragment AccountLink_data on AccountType {\n  address\n  config\n  isCompromised\n  user {\n    publicUsername\n    id\n  }\n  displayName\n  ...ProfileImage_data\n  ...wallet_accountKey\n  ...accounts_url\n}\n\nfragment AccountTrackingContext_account on AccountType {\n  relayId\n  address\n  displayName\n}\n\nfragment AddToCartAndQuickBuyButton_order on OrderV2Type {\n  ...useIsQuickBuyEnabled_order\n  ...ItemAddToCartButton_order\n  ...QuickBuyButton_order\n}\n\nfragment ApplyForVerificationBanner_data on AccountType {\n  canViewVerificationForm\n  config\n  verificationRequest {\n    status\n    id\n  }\n}\n\nfragment AssetMediaAnimation_asset on AssetType {\n  ...AssetMediaImage_asset\n  ...AssetMediaContainer_asset\n  ...AssetMediaPlaceholderImage_asset\n}\n\nfragment AssetMediaAudio_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaContainer_asset on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_1LNk0S on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaContainer_asset_4a3mm5 on AssetType {\n  backgroundColor\n  ...AssetMediaEditions_asset_1mZMwQ\n  defaultRarityData {\n    ...RarityIndicator_data\n    id\n  }\n  collection {\n    ...useIsRarityEnabled_collection\n    id\n  }\n}\n\nfragment AssetMediaEditions_asset_1mZMwQ on AssetType {\n  decimals\n}\n\nfragment AssetMediaImage_asset on AssetType {\n  backgroundColor\n  imageUrl\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaPlaceholderImage_asset on AssetType {\n  collection {\n    displayData {\n      cardDisplayStyle\n    }\n    id\n  }\n}\n\nfragment AssetMediaVideo_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMediaWebgl_asset on AssetType {\n  backgroundColor\n  ...AssetMediaImage_asset\n}\n\nfragment AssetMedia_asset on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_1LNk0S\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetMedia_asset_1mZMwQ on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_1LNk0S\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetMedia_asset_5MxNd on AssetType {\n  animationUrl\n  displayImageUrl\n  imageUrl\n  isDelisted\n  ...AssetMediaAnimation_asset\n  ...AssetMediaAudio_asset\n  ...AssetMediaContainer_asset_4a3mm5\n  ...AssetMediaImage_asset\n  ...AssetMediaPlaceholderImage_asset\n  ...AssetMediaVideo_asset\n  ...AssetMediaWebgl_asset\n}\n\nfragment AssetQuantity_data on AssetQuantityType {\n  asset {\n    ...Price_data\n    id\n  }\n  quantity\n}\n\nfragment AssetSearchListViewTableAssetInfo_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ...PortfolioTableItemCellTooltip_item\n}\n\nfragment AssetSearchListViewTableQuickBuy_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  relayId\n}\n\nfragment BulkPurchaseModal_orders on OrderV2Type {\n  relayId\n  item {\n    __typename\n    relayId\n    chain {\n      identifier\n    }\n    ... on AssetType {\n      collection {\n        slug\n        isSafelisted\n        id\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  payment {\n    relayId\n    symbol\n    id\n  }\n  ...useTotalPrice_orders\n  ...useFulfillingListingsWillReactivateOrders_orders\n}\n\nfragment CampaignAnnouncementModal_data on Query {\n  campaignAnnouncementModal {\n    campaignId\n    title\n    description\n    overrideUrl\n    ctaText\n    ctaUrl\n    id\n  }\n}\n\nfragment CollectionLink_assetContract on AssetContractType {\n  address\n  blockExplorerLink\n}\n\nfragment CollectionLink_collection on CollectionType {\n  name\n  slug\n  verificationStatus\n  ...collection_url\n}\n\nfragment CollectionTrackingContext_collection on CollectionType {\n  relayId\n  slug\n  isVerified\n  isCollectionOffersEnabled\n  defaultChain {\n    identifier\n  }\n}\n\nfragment CreateListingButton_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...CreateQuickSingleListingFlowModal_asset\n  }\n  ...itemEvents_dataV2\n  ...item_sellUrl\n}\n\nfragment CreateQuickSingleListingFlowModal_asset on AssetType {\n  relayId\n  chain {\n    identifier\n  }\n  ...itemEvents_dataV2\n}\n\nfragment EditListingButton_item on ItemType {\n  __isItemType: __typename\n  chain {\n    identifier\n  }\n  ...EditListingModal_item\n  ...itemEvents_dataV2\n}\n\nfragment EditListingButton_listing on OrderV2Type {\n  ...EditListingModal_listing\n}\n\nfragment EditListingModal_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    tokenId\n    assetContract {\n      address\n      id\n    }\n    chain {\n      identifier\n    }\n  }\n  ... on AssetBundleType {\n    slug\n  }\n}\n\nfragment EditListingModal_listing on OrderV2Type {\n  relayId\n}\n\nfragment FeaturedShelfAssets_data_3z3gbW on AccountShelfType {\n  shelfAssets {\n    id\n    displayOrder\n    asset {\n      id\n      name\n      displayImageUrl\n      ...asset_url\n    }\n    ...PhoenixAsset_data_3z3gbW\n  }\n}\n\nfragment ItemAddToCartButton_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    ... on AssetType {\n      isCurrentlyFungible\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  ...ShoppingCartContextProvider_inline_order\n}\n\nfragment ItemCardContent on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    relayId\n    name\n    ...AssetMedia_asset_1mZMwQ\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            ...AssetMedia_asset\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ItemCardContent_1mZMwQ on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    relayId\n    name\n    ...AssetMedia_asset_1mZMwQ\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            ...AssetMedia_asset\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment ItemCardCta_item_2qvZ6X on ItemType {\n  __isItemType: __typename\n  __typename\n  orderData {\n    bestAskV2 {\n      ...AddToCartAndQuickBuyButton_order\n      ...EditListingButton_listing\n      ...QuickBuyButton_order\n      id\n    }\n  }\n  ...useItemCardCta_item_2qvZ6X\n  ...itemEvents_dataV2\n  ...CreateListingButton_item\n  ...EditListingButton_item\n}\n\nfragment ItemCardFooter_2YN2Q8 on ItemType {\n  __isItemType: __typename\n  __typename\n  relayId\n  name\n  orderData {\n    bestBidV2 {\n      orderType\n      priceType {\n        unit\n      }\n      ...ItemCardPrice_data\n      id\n    }\n    bestAskV2 {\n      ...ItemCardFooter_bestAskV2\n      id\n    }\n  }\n  ...ItemMetadata_2JGaZg\n  ... on AssetType {\n    tokenId\n    isDelisted\n    defaultRarityData {\n      ...RarityIndicator_data\n      id\n    }\n    collection {\n      slug\n      name\n      isVerified\n      ...collection_url\n      ...useIsRarityEnabled_collection\n      id\n    }\n    largestOwner {\n      owner {\n        ...AccountLink_data\n        id\n      }\n      id\n    }\n    ...AssetSearchListViewTableAssetInfo_item\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      slug\n      name\n      isVerified\n      ...collection_url\n      ...useIsRarityEnabled_collection\n      id\n    }\n  }\n  ...useItemCardCta_item_2qvZ6X\n  ...item_url\n  ...ItemCardContent\n}\n\nfragment ItemCardFooter_bestAskV2 on OrderV2Type {\n  orderType\n  priceType {\n    unit\n  }\n  maker {\n    address\n    id\n  }\n  ...ItemCardPrice_data\n  ...ItemAddToCartButton_order\n  ...AssetSearchListViewTableQuickBuy_order\n  ...useIsQuickBuyEnabled_order\n}\n\nfragment ItemCardPrice_data on OrderV2Type {\n  perUnitPriceType {\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    symbol\n    id\n  }\n  ...useIsQuickBuyEnabled_order\n}\n\nfragment ItemCard_data_3z3gbW on ItemType {\n  __isItemType: __typename\n  __typename\n  relayId\n  chain {\n    identifier\n  }\n  orderData {\n    bestAskV2 {\n      priceType {\n        eth\n      }\n      id\n    }\n  }\n  ... on AssetType {\n    isDelisted\n    totalQuantity\n    collection {\n      slug\n      ...CollectionTrackingContext_collection\n      id\n    }\n    ...itemEvents_data\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      slug\n      ...CollectionTrackingContext_collection\n      id\n    }\n  }\n  ...ItemCardContent_1mZMwQ\n  ...ItemCardFooter_2YN2Q8\n  ...ItemCardCta_item_2qvZ6X\n  ...item_url\n  ...ItemTrackingContext_item\n}\n\nfragment ItemMetadata_2JGaZg on ItemType {\n  __isItemType: __typename\n  __typename\n  orderData {\n    bestAskV2 {\n      openedAt\n      createdDate\n      closedAt\n      id\n    }\n  }\n  assetEventData {\n    lastSale {\n      unitPriceQuantity {\n        ...AssetQuantity_data\n        quantity\n        asset {\n          symbol\n          decimals\n          id\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment ItemTrackingContext_item on ItemType {\n  __isItemType: __typename\n  relayId\n  verificationStatus\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    tokenId\n    isReportedSuspicious\n    assetContract {\n      address\n      id\n    }\n  }\n  ... on AssetBundleType {\n    slug\n  }\n}\n\nfragment OrderListItem_order on OrderV2Type {\n  relayId\n  makerOwnedQuantity\n  item {\n    __typename\n    displayName\n    ... on AssetType {\n      assetContract {\n        ...CollectionLink_assetContract\n        id\n      }\n      collection {\n        ...CollectionLink_collection\n        id\n      }\n      ...AssetMedia_asset\n      ...asset_url\n      ...useItemFees_item\n    }\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              displayName\n              relayId\n              assetContract {\n                ...CollectionLink_assetContract\n                id\n              }\n              collection {\n                ...CollectionLink_collection\n                id\n              }\n              ...StackedAssetMedia_assets\n              ...AssetMedia_asset\n              ...asset_url\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ...itemEvents_dataV2\n    ...useIsItemSafelisted_item\n    ...ItemTrackingContext_item\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  remainingQuantityType\n  ...OrderPrice\n}\n\nfragment OrderList_orders on OrderV2Type {\n  item {\n    __typename\n    ... on AssetType {\n      __typename\n      relayId\n    }\n    ... on AssetBundleType {\n      __typename\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  relayId\n  ...OrderListItem_order\n  ...useFulfillingListingsWillReactivateOrders_orders\n}\n\nfragment OrderPrice on OrderV2Type {\n  priceType {\n    unit\n  }\n  perUnitPriceType {\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    ...TokenPricePayment\n    id\n  }\n}\n\nfragment PhoenixAddressPill_data on AccountType {\n  address\n  names {\n    name\n    type\n  }\n}\n\nfragment PhoenixAsset_data_3z3gbW on AccountShelfAssetType {\n  asset {\n    ...ItemCard_data_3z3gbW\n    id\n  }\n}\n\nfragment PhoenixHeader_account on AccountType {\n  config\n  displayName\n  isCompromised\n}\n\nfragment PhoenixProfileImage_data on AccountType {\n  ...ProfileImage_data\n  imageUrl\n  user {\n    publicUsername\n    id\n  }\n  displayName\n}\n\nfragment PhoenixSubheader_account on AccountType {\n  user {\n    dateJoined\n    id\n  }\n  ...PhoenixAddressPill_data\n}\n\nfragment PortfolioTableItemCellTooltip_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ...AssetMedia_asset_5MxNd\n  ...PortfolioTableTraitTable_asset\n  ...asset_url\n}\n\nfragment PortfolioTableTraitTable_asset on AssetType {\n  assetContract {\n    address\n    chain\n    id\n  }\n  isCurrentlyFungible\n  tokenId\n}\n\nfragment Price_data on AssetType {\n  decimals\n  symbol\n  usdSpotPrice\n}\n\nfragment ProfileActionBar_data on AccountType {\n  relayId\n  address\n  names {\n    name\n    type\n  }\n  ...accounts_url\n}\n\nfragment ProfileContainer_data_1QDmLU on Query {\n  account(identity: $identity) {\n    address\n    bannerImageUrl\n    displayName\n    user {\n      username\n      publicUsername\n      id\n    }\n    metadata {\n      isBanned\n      isDisabled\n    }\n    ...PhoenixHeader_account\n    ...ProfileInfo_data\n    ...PhoenixSubheader_account\n    ...ApplyForVerificationBanner_data\n    ...ProfileActionBar_data\n    ...PhoenixProfileImage_data\n    ...socialLinksData\n    ...profilePageQueries_account_8v4Bz\n    ...profilePageQueries_featured_3z3gbW\n    ...AccountTrackingContext_account\n    id\n  }\n  ...CampaignAnnouncementModal_data\n  ...ProfileMetadata_data_1dpGHs\n}\n\nfragment ProfileImage_data on AccountType {\n  imageUrl\n}\n\nfragment ProfileInfo_data on AccountType {\n  bio\n}\n\nfragment ProfileMetadata_data_1dpGHs on Query {\n  account(identity: $identity) {\n    address\n    user {\n      publicUsername\n      id\n    }\n    id\n  }\n  collection {\n    name\n    id\n  }\n}\n\nfragment QuickBuyButton_order on OrderV2Type {\n  maker {\n    address\n    id\n  }\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ...itemEvents_dataV2\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  openedAt\n  relayId\n}\n\nfragment RarityIndicator_data on RarityDataType {\n  rank\n  rankPercentile\n  rankCount\n  maxRank\n}\n\nfragment ShoppingCartContextProvider_inline_order on OrderV2Type {\n  relayId\n  makerOwnedQuantity\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    relayId\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  maker {\n    relayId\n    id\n  }\n  priceType {\n    usd\n  }\n  payment {\n    relayId\n    id\n  }\n  remainingQuantityType\n  ...useTotalItems_orders\n  ...ShoppingCart_orders\n}\n\nfragment ShoppingCartDetailedView_orders on OrderV2Type {\n  relayId\n  item {\n    __typename\n    chain {\n      identifier\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n  supportsGiftingOnPurchase\n  ...useTotalPrice_orders\n  ...OrderList_orders\n}\n\nfragment ShoppingCart_orders on OrderV2Type {\n  ...ShoppingCartDetailedView_orders\n  ...BulkPurchaseModal_orders\n}\n\nfragment StackedAssetMedia_assets on AssetType {\n  relayId\n  ...AssetMedia_asset\n  collection {\n    logo\n    id\n  }\n}\n\nfragment TokenPricePayment on PaymentAssetType {\n  symbol\n}\n\nfragment accounts_url on AccountType {\n  address\n  user {\n    publicUsername\n    id\n  }\n}\n\nfragment asset_url on AssetType {\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment bundle_url on AssetBundleType {\n  slug\n  chain {\n    identifier\n  }\n}\n\nfragment collection_url on CollectionType {\n  slug\n  isCategory\n}\n\nfragment itemEvents_data on AssetType {\n  relayId\n  assetContract {\n    address\n    id\n  }\n  tokenId\n  chain {\n    identifier\n  }\n}\n\nfragment itemEvents_dataV2 on ItemType {\n  __isItemType: __typename\n  relayId\n  chain {\n    identifier\n  }\n  ... on AssetType {\n    tokenId\n    assetContract {\n      address\n      id\n    }\n  }\n}\n\nfragment item_sellUrl on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...asset_url\n  }\n  ... on AssetBundleType {\n    slug\n    chain {\n      identifier\n    }\n    assetQuantities(first: 18) {\n      edges {\n        node {\n          asset {\n            relayId\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment item_url on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    ...asset_url\n  }\n  ... on AssetBundleType {\n    ...bundle_url\n  }\n}\n\nfragment profilePageQueries_account_8v4Bz on AccountType {\n  user {\n    favoriteAssetCount\n    id\n  }\n  privateAssetCount @include(if: $includePrivateAssetCount)\n}\n\nfragment profilePageQueries_featured_3z3gbW on AccountType {\n  shelves {\n    id\n    name\n    description\n    displayOrder\n    shelfAssets {\n      id\n    }\n    ...FeaturedShelfAssets_data_3z3gbW\n  }\n}\n\nfragment socialLinksData on AccountType {\n  metadata {\n    instagramUsername\n    twitterUsername\n    websiteUrl\n  }\n  connectedTwitterUsername\n  connectedInstagramUsername\n}\n\nfragment useFulfillingListingsWillReactivateOrders_orders on OrderV2Type {\n  ...useTotalItems_orders\n}\n\nfragment useIsItemSafelisted_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    collection {\n      slug\n      verificationStatus\n      id\n    }\n  }\n  ... on AssetBundleType {\n    assetQuantities(first: 30) {\n      edges {\n        node {\n          asset {\n            collection {\n              slug\n              verificationStatus\n              id\n            }\n            id\n          }\n          id\n        }\n      }\n    }\n  }\n}\n\nfragment useIsQuickBuyEnabled_order on OrderV2Type {\n  orderType\n  item {\n    __typename\n    ... on AssetType {\n      isCurrentlyFungible\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment useIsRarityEnabled_collection on CollectionType {\n  slug\n  enabledRarities\n}\n\nfragment useItemCardCta_item_2qvZ6X on ItemType {\n  __isItemType: __typename\n  __typename\n  chain {\n    identifier\n  }\n  orderData {\n    bestAskV2 {\n      orderType\n      maker {\n        address\n        id\n      }\n      id\n    }\n  }\n  ... on AssetType {\n    isDelisted\n    isListable\n    isCurrentlyFungible\n  }\n}\n\nfragment useItemFees_item on ItemType {\n  __isItemType: __typename\n  __typename\n  ... on AssetType {\n    totalCreatorFee\n    collection {\n      openseaSellerFeeBasisPoints\n      isCreatorFeesEnforced\n      id\n    }\n  }\n  ... on AssetBundleType {\n    bundleCollection: collection {\n      openseaSellerFeeBasisPoints\n      totalCreatorFeeBasisPoints\n      isCreatorFeesEnforced\n      id\n    }\n  }\n}\n\nfragment useTotalItems_orders on OrderV2Type {\n  item {\n    __typename\n    relayId\n    ... on AssetBundleType {\n      assetQuantities(first: 30) {\n        edges {\n          node {\n            asset {\n              relayId\n              id\n            }\n            id\n          }\n        }\n      }\n    }\n    ... on Node {\n      __isNode: __typename\n      id\n    }\n  }\n}\n\nfragment useTotalPrice_orders on OrderV2Type {\n  relayId\n  perUnitPriceType {\n    usd\n    unit\n  }\n  dutchAuctionFinalPriceType {\n    usd\n    unit\n  }\n  openedAt\n  closedAt\n  payment {\n    symbol\n    ...TokenPricePayment\n    id\n  }\n}\n\nfragment wallet_accountKey on AccountType {\n  address\n}\n",
        "variables": {
            "identity": {
                "username": username
            },
            "includePrivateAssetCount": False,
            "collection": None
        }
    }
    headers = await get_headers(x_query='1aaacddc4da7e8d7c255c1bdb43e963b4da5b9c6f108bad8d2813676d0e58edd')
    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.post(url, json=payload) as response:
            data = await response.json()

            # Обработка полученных данных
            return data


async def get_collection_info(collection_slug, url):
    headers = await get_headers(x_query='d150bee7cc9290d938bcde60e069c3b6e06c894be1a72392b7297c69352dd36d')
    payload = {
        "id": "CollectionPageQuery",
        "query": "query CollectionPageQuery(\n  $collection: CollectionSlug!\n) {\n  collection(collection: $collection) {\n    __typename\n    id\n  }\n  ...CollectionPageContainer_data_2YoIWt\n}\n\nfragment AccountLink_data on AccountType {\n  address\n  config\n  isCompromised\n  user {\n    publicUsername\n    id\n  }\n  displayName\n  ...ProfileImage_data\n  ...wallet_accountKey\n  ...accounts_url\n}\n\nfragment CampaignAnnouncementModal_data on Query {\n  campaignAnnouncementModal {\n    campaignId\n    title\n    description\n    overrideUrl\n    ctaText\n    ctaUrl\n    id\n  }\n}\n\nfragment CollectionActionBar_data on CollectionType {\n  relayId\n  dropv2 {\n    __typename\n    status\n    id\n  }\n  assetContracts(first: 2) {\n    edges {\n      node {\n        blockExplorerLink\n        chainData {\n          blockExplorer {\n            name\n            identifier\n          }\n        }\n        id\n      }\n    }\n  }\n  discordUrl\n  externalUrl\n  instagramUsername\n  mediumUsername\n  telegramUrl\n  twitterUsername\n  connectedInstagramUsername\n  connectedTwitterUsername\n  ...collection_url\n  ...CollectionWatchlistButton_data\n}\n\nfragment CollectionDescriptionMetadata_data on CollectionType {\n  ...collection_url\n  metadata {\n    custom {\n      isMockDrop\n      hideProgressBar\n    }\n  }\n  statsV2 {\n    hasFungibles\n    totalSupply\n    totalQuantity\n  }\n  ...useDropState_data\n  dropv2 {\n    __typename\n    ... on Drop721LimitedEditionType {\n      totalItemCount\n    }\n    ... on Drop1155LimitedEditionType {\n      totalItemCount\n    }\n    mintedItemCount\n    id\n  }\n  category {\n    slug\n  }\n  createdDate\n  totalCreatorFeeBasisPoints\n  defaultChain {\n    displayName\n    identifier\n  }\n}\n\nfragment CollectionFooter_collection on CollectionType {\n  isCollectionOffersEnabled\n  slug\n}\n\nfragment CollectionInfoInner_data on CollectionType {\n  isCollectionOffersEnabled\n  description\n  slug\n  name\n  metadata {\n    custom {\n      isMockDrop\n    }\n  }\n  dropv2 {\n    __typename\n    landingPageReady\n    id\n  }\n  ...collection_url\n  ...collection_poll_stats\n  ...collection_live_stats\n  ...collection_live_listing_stats\n  ...CollectionDescriptionMetadata_data\n}\n\nfragment CollectionInfo_data on CollectionType {\n  slug\n  ...CollectionInfoInner_data\n}\n\nfragment CollectionInspiredBy_data on CollectionType {\n  inspiredBy(first: 2) {\n    edges {\n      node {\n        slug\n        name\n        ...collection_url\n        id\n      }\n    }\n  }\n}\n\nfragment CollectionPageContainer_data_2YoIWt on Query {\n  collection(collection: $collection) {\n    isSensitiveContent\n    ...CollectionPageHead_collection\n    ...CollectionPageLayout_collection\n    ...useIsRarityEnabled_collection\n    ...useIsOffersTabEnabled_collection\n    ...CollectionTrackingContext_collection\n    id\n  }\n  ...CampaignAnnouncementModal_data\n}\n\nfragment CollectionPageHead_collection on CollectionType {\n  name\n  description\n  slug\n  owner {\n    address\n    displayName\n    id\n  }\n  ...collection_url\n}\n\nfragment CollectionPageLayout_collection on CollectionType {\n  slug\n  name\n  imageUrl\n  bannerImageUrl\n  representativeAsset {\n    assetContract {\n      openseaVersion\n      id\n    }\n    id\n  }\n  assetContracts(first: 2) {\n    edges {\n      node {\n        __typename\n        id\n      }\n    }\n  }\n  ...PhoenixHeader_collection\n  ...PhoenixSubheader_collection\n  ...CollectionActionBar_data\n  ...CollectionInfo_data\n  ...CollectionSocialBar_data\n  ...CollectionTabs_collection\n  ...CollectionFooter_collection\n  ...SweepContextProvider_collection\n  ...useIsCollectionFooterEnabled_collection\n  ...CollectionInspiredBy_data\n}\n\nfragment CollectionSocialBar_data on CollectionType {\n  assetContracts(first: 2) {\n    edges {\n      node {\n        address\n        blockExplorerLink\n        chainData {\n          blockExplorer {\n            name\n            identifier\n          }\n        }\n        id\n      }\n    }\n  }\n  discordUrl\n  externalUrl\n  instagramUsername\n  mediumUsername\n  telegramUrl\n  twitterUsername\n  connectedDiscordGuildId\n  connectedTwitterUsername\n  connectedInstagramUsername\n}\n\nfragment CollectionTabs_collection on CollectionType {\n  ...useIsAnalyticsTabEnabled_collection\n  ...useIsOffersTabEnabled_collection\n}\n\nfragment CollectionTrackingContext_collection on CollectionType {\n  relayId\n  slug\n  isVerified\n  isCollectionOffersEnabled\n  defaultChain {\n    identifier\n  }\n}\n\nfragment CollectionWatchlistButton_data on CollectionType {\n  relayId\n}\n\nfragment PhoenixHeader_collection on CollectionType {\n  name\n  verificationStatus\n}\n\nfragment PhoenixSubheader_collection on CollectionType {\n  owner {\n    ...AccountLink_data\n    id\n  }\n  verificationStatus\n}\n\nfragment ProfileImage_data on AccountType {\n  imageUrl\n}\n\nfragment SweepContextProvider_collection on CollectionType {\n  nativePaymentAsset {\n    symbol\n    id\n  }\n}\n\nfragment accounts_url on AccountType {\n  address\n  user {\n    publicUsername\n    id\n  }\n}\n\nfragment collection_live_listing_stats on CollectionType {\n  statsV2 {\n    floorPrice {\n      unit\n      eth\n      symbol\n      usd\n    }\n  }\n}\n\nfragment collection_live_stats on CollectionType {\n  statsV2 {\n    numOwners\n    totalSupply\n    totalQuantity\n    totalVolume {\n      unit\n      symbol\n    }\n  }\n  numOpenCriteriaOffers\n  totalCriteriaOfferVolume {\n    unit\n    symbol\n  }\n}\n\nfragment collection_poll_stats on CollectionType {\n  statsV2 {\n    totalListed\n  }\n  collectionOffers(first: 1) {\n    edges {\n      node {\n        perUnitPriceType {\n          unit\n          symbol\n        }\n        id\n      }\n    }\n  }\n}\n\nfragment collection_url on CollectionType {\n  slug\n  isCategory\n}\n\nfragment useDropState_data on CollectionType {\n  statsV2 {\n    totalSupply\n  }\n  dropv2 {\n    __typename\n    stages {\n      __typename\n      startTime\n      endTime\n      id\n    }\n    mintedItemCount\n    ... on Drop721LimitedEditionType {\n      totalItemCount\n    }\n    ... on Drop1155LimitedEditionType {\n      totalItemCount\n    }\n    id\n  }\n}\n\nfragment useIsAnalyticsTabEnabled_collection on CollectionType {\n  defaultChain {\n    identifier\n  }\n  statsV2 {\n    totalQuantity\n  }\n}\n\nfragment useIsCollectionFooterEnabled_collection on CollectionType {\n  defaultChain {\n    identifier\n  }\n}\n\nfragment useIsOffersTabEnabled_collection on CollectionType {\n  isCollectionOffersEnabled\n  defaultChain {\n    identifier\n  }\n}\n\nfragment useIsRarityEnabled_collection on CollectionType {\n  slug\n  enabledRarities\n}\n\nfragment wallet_accountKey on AccountType {\n  address\n}\n",
        "variables": {
            "collection": collection_slug
        }
    }

    async with aiohttp.ClientSession(headers=headers) as session:
        async with session.post(url, json=payload) as response:
            try:
                data = await response.json()

            except:
                await asyncio.sleep(2)
                try:
                    data = await response.json()
                except Exception as ex:
                    logger.info(f'ERROR get_collection_info {ex}')
                    data = None

            return data
            # Обработка полученных данных


async def get_fo():
    url = "https://opensea.io/__api/graphql/"
    creator_name = 'CryptoKnight83'
    user_info = await get_user_info(username=creator_name, url=url)

    user_social_links = ''
    twitter_username = user_info.get('data').get(
        'account').get('metadata').get('twitterUsername')
    if not twitter_username:
        twitter_username = user_info.get('data').get(
            'account').get('connectedTwitterUsername')

    user_social_links += f"https://twitter.com/{twitter_username} , " if twitter_username else ''
    instagram_username = user_info.get('data').get(
        'account').get('metadata').get('instagramUsername')
    if not instagram_username:
        instagram_username = user_info.get('data').get(
            'account').get('connectedInstagramUsername')
    user_social_links += f"https://www.instagram.com/{instagram_username}, " if instagram_username else ''
    logger.info(user_info.get('data'))
    website_url = user_info.get('data').get(
        'account').get('metadata').get('websiteUrl')

    user_social_links += website_url + ' , ' if website_url else ''
    logger.info(user_social_links)


# Запуск бота
if __name__ == '__main__':
    s = 'approve234234'.split('approve')
    print(s)
    asyncio.run(get_fo())
